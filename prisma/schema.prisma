// prisma/schema.prisma

// Configuração do Prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos de dados
model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String
  password       String
  role           Role     @default(USER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company? @relation(fields: [companyId], references: [id])
  companyId      String?
}

model Notification {
  id          String    @id @default(uuid())
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  type        String    // LOW_BALANCE, SYSTEM_UPDATE, etc.
  title       String
  message     String
  metadata    Json?
  status      String    // UNREAD, READ, DISMISSED
  createdAt   DateTime  @default(now())
  readAt      DateTime?
}

model WhatsAppConfig {
  id                String   @id @default(uuid())
  companyId         String   @unique
  company           Company  @relation(fields: [companyId], references: [id])
  phoneNumber       String   // Número de telefone associado
  apiKey            String?  // Chave da API do WhatsApp Business (encriptada)
  verificationToken String?  // Token para verificação do webhook
  active            Boolean  @default(false)
  welcomeMessage    String   @default("Olá! Sou o assistente virtual. Como posso ajudar?")
  offHoursMessage   String   @default("Estamos fora do horário de atendimento. Retornaremos em breve.")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Company {
  id                  String     @id @default(uuid())
  name                String
  email               String     @unique
  credits             Int        @default(0)
  active              Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  users               User[]
  documents           Document[]
  conversations       Conversation[]
  assistantSettings   Json?      // Armazena configurações como tom de voz, nome, etc.
  notifications       Notification[]
  whatsAppConfig      WhatsAppConfig?
}

model DocumentChunk {
  id          String   @id @default(uuid())
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  content     String   @db.Text
  embedding   Bytes?   // Armazenar embedding como bytes
  chunkIndex  Int
  tokenCount  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id          String   @id @default(uuid())
  name        String
  type        String   // PDF, DOCX, TXT
  status      String   // PROCESSING, PROCESSED, ERROR
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json?    // Metadados do documento
  chunks      DocumentChunk[]
}



model Conversation {
  id           String    @id @default(uuid())
  company      Company   @relation(fields: [companyId], references: [id])
  companyId    String
  userId       String?   // ID do usuário final (pode ser telefone no caso do WhatsApp)
  channel      String    // WHATSAPP, WEB, etc.
  status       String    // ACTIVE, CLOSED, TRANSFERRED
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  content        String
  type           String       // TEXT, IMAGE, FILE
  sender         String       // USER, ASSISTANT
  timestamp      DateTime     @default(now())
  metadata       Json?        // Metadados como custo em créditos, etc.
}

model CreditTransaction {
  id           String   @id @default(uuid())
  companyId    String
  amount       Int
  operationType String   // ADD, SUBTRACT
  timestamp    DateTime @default(now())
  balanceAfter Int
  description  String?
  metadata       Json?     // Para armazenar informações como tokenUsage, model, etc.
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}